const WebSocket = require('ws');
const jwt = require('jsonwebtoken');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const JWT_SECRET = 'qwikxp_secret_key_2024';

class WebSocketService {
  constructor(server) {
    this.wss = new WebSocket.Server({ server });
    this.clients = new Map(); // userId -> WebSocket
    this.userChats = new Map(); // userId -> Set of chatIds
    
    this.setupWebSocket();
  }

  setupWebSocket() {
    this.wss.on('connection', (ws, req) => {
      console.log('üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä token
      const url = new URL(req.url, 'http://localhost');
      const token = url.searchParams.get('token');
      
      if (!token) {
        ws.close(1008, '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        return;
      }

      try {
        const decoded = jwt.verify(token, JWT_SECRET);
        const userId = decoded.userId;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.clients.set(userId, ws);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.loadUserChats(userId);
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${decoded.username} –ø–æ–¥–∫–ª—é—á–µ–Ω (ID: ${userId})`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        ws.send(JSON.stringify({
          type: 'connection_established',
          userId: userId,
          timestamp: new Date().toISOString()
        }));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        ws.on('message', async (data) => {
          try {
            const message = JSON.parse(data.toString());
            await this.handleMessage(userId, message);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            ws.send(JSON.stringify({
              type: 'error',
              error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
              timestamp: new Date().toISOString()
            }));
          }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        ws.on('close', () => {
          console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${decoded.username} –æ—Ç–∫–ª—é—á–µ–Ω (ID: ${userId})`);
          this.clients.delete(userId);
          this.userChats.delete(userId);
        });

        ws.on('error', (error) => {
          console.error(`WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
          this.clients.delete(userId);
          this.userChats.delete(userId);
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket:', error);
        ws.close(1008, '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
      }
    });
  }

  async loadUserChats(userId) {
    try {
      const chats = await prisma.chat.findMany({
        where: {
          members: {
            some: { userId: userId }
          }
        },
        select: { id: true }
      });
      
      const chatIds = new Set(chats.map(chat => chat.id));
      this.userChats.set(userId, chatIds);
      
      console.log(`üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chatIds.size} —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  async handleMessage(userId, message) {
    const { type, data } = message;
    
    switch (type) {
      case 'typing_start':
        await this.handleTypingStart(userId, data);
        break;
        
      case 'typing_stop':
        await this.handleTypingStop(userId, data);
        break;
        
      case 'message_read':
        await this.handleMessageRead(userId, data);
        break;
        
      case 'user_status':
        await this.handleUserStatus(userId, data);
        break;
        
      default:
        console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${type}`);
    }
  }

  async handleTypingStart(userId, data) {
    const { chatId } = data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
    const chatMember = await prisma.chatMember.findUnique({
      where: {
        chatId_userId: {
          chatId: chatId,
          userId: userId
        }
      }
    });

    if (!chatMember) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
    await this.broadcastToChat(chatId, {
      type: 'typing_start',
      userId: userId,
      chatId: chatId,
      timestamp: new Date().toISOString()
    });
  }

  async handleTypingStop(userId, data) {
    const { chatId } = data;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–µ—á–∞—Ç–∏
    await this.broadcastToChat(chatId, {
      type: 'typing_stop',
      userId: userId,
      chatId: chatId,
      timestamp: new Date().toISOString()
    });
  }

  async handleMessageRead(userId, data) {
    const { messageId, chatId } = data;
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è
      await prisma.messageReceipt.upsert({
        where: {
          messageId_userId: {
            messageId: messageId,
            userId: userId
          }
        },
        update: {
          status: 'READ',
          updatedAt: new Date()
        },
        create: {
          messageId: messageId,
          userId: userId,
          status: 'READ'
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
      await this.broadcastToChat(chatId, {
        type: 'message_read',
        messageId: messageId,
        userId: userId,
        chatId: chatId,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  async handleUserStatus(userId, data) {
    const { status } = data; // online, offline, away
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: userId },
        data: { lastSeenAt: new Date() }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –æ–±—â–∏–µ —á–∞—Ç—ã
      const userChats = this.userChats.get(userId) || new Set();
      
      for (const chatId of userChats) {
        await this.broadcastToChat(chatId, {
          type: 'user_status',
          userId: userId,
          status: status,
          timestamp: new Date().toISOString()
        });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  async broadcastToChat(chatId, message) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
      const chatMembers = await prisma.chatMember.findMany({
        where: { chatId: chatId },
        select: { userId: true }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
      for (const member of chatMembers) {
        const client = this.clients.get(member.userId);
        if (client && client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify(message));
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
  async broadcastNewMessage(chatId, messageData) {
    await this.broadcastToChat(chatId, {
      type: 'new_message',
      data: messageData,
      timestamp: new Date().toISOString()
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
  async broadcastNewChat(chatId, chatData) {
    await this.broadcastToChat(chatId, {
      type: 'new_chat',
      data: chatData,
      timestamp: new Date().toISOString()
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
  async broadcastUserAddedToChat(chatId, userId, addedBy) {
    await this.broadcastToChat(chatId, {
      type: 'user_added',
      chatId: chatId,
      userId: userId,
      addedBy: addedBy,
      timestamp: new Date().toISOString()
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  getStats() {
    return {
      totalConnections: this.clients.size,
      connectedUsers: Array.from(this.clients.keys()),
      totalChats: this.userChats.size
    };
  }
}

module.exports = WebSocketService;
