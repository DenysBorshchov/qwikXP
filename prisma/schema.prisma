// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./qwikxp.db"
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String?  @unique
  phone        String?  @unique
  passwordHash String
  displayName  String?
  bio          String?
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastSeenAt   DateTime?
  isDeleted    Boolean  @default(false)

  // Relations
  devices      Device[]
  sentMessages Message[] @relation("MessageSender")
  chatMembers  ChatMember[]
  receipts     MessageReceipt[]
  ownedChats   Chat[] @relation("ChatOwner")

  @@map("users")
}

model Device {
  id           String   @id @default(uuid())
  userId       String
  deviceToken  String?  // FCM token
  platform     String   // android, ios, web
  lastActiveAt DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model Chat {
  id        String   @id @default(uuid())
  isGroup   Boolean  @default(false)
  title     String?
  ownerId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPinned  Boolean  @default(false)
  isArchived Boolean @default(false)

  // Relations
  owner     User?         @relation("ChatOwner", fields: [ownerId], references: [id])
  members   ChatMember[]
  messages  Message[]

  @@map("chats")
}

model ChatMember {
  id        String   @id @default(uuid())
  chatId    String
  userId    String
  role      String   @default("member") // owner, admin, member
  joinedAt  DateTime @default(now())

  // Relations
  chat      Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_members")
}

model Message {
  id        String      @id @default(uuid())
  chatId    String
  senderId  String
  type      MessageType
  content   String      // JSON string for complex content
  mediaUrl  String?
  mediaMeta String?     // JSON string for media metadata
  sentAt    DateTime    @default(now())
  editedAt  DateTime?
  deletedAt DateTime?

  // Relations
  chat      Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User @relation("MessageSender", fields: [senderId], references: [id])
  receipts  MessageReceipt[]

  @@map("messages")
}

model MessageReceipt {
  id         String        @id @default(uuid())
  messageId  String
  userId     String
  status     ReceiptStatus
  updatedAt  DateTime      @default(now())

  // Relations
  message    Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_receipts")
}

enum MessageType {
  TEXT
  IMAGE
  VOICE
  FILE
  SYSTEM
}

enum ReceiptStatus {
  SENT
  DELIVERED
  READ
}
